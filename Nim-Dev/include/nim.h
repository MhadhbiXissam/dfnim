/* Generated by Nim Compiler v2.0.0 */
#ifndef __nim__
#define __nim__
#define NIM_INTBITS 64

#include "nimbase.h"
#include <setjmp.h>
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
typedef struct TGenericSeq TGenericSeq;
typedef struct NimStringDesc NimStringDesc;
typedef struct TNimNode TNimNode;
typedef struct TNimType TNimType;
typedef struct RootObj RootObj;
typedef struct RootEffect RootEffect;
typedef struct Exception Exception;
typedef struct tySequence__2ALwPJKv8Nz8mMm4Hy9crdw tySequence__2ALwPJKv8Nz8mMm4Hy9crdw;
typedef struct TSafePoint TSafePoint;
typedef struct GcFrameHeader GcFrameHeader;
typedef struct ForLoopStmt ForLoopStmt;
struct TGenericSeq {
	NI len;
	NI reserved;
};
struct NimStringDesc {
  TGenericSeq Sup;
	NIM_CHAR data[SEQ_DECL_SIZE];
};
typedef NU8 tyEnum_TNimNodeKind__27ptuqE7C12XXCcK2N0u8g;
struct TNimNode {
	tyEnum_TNimNodeKind__27ptuqE7C12XXCcK2N0u8g kind;
	NI offset;
	TNimType* typ;
	NCSTRING name;
	NI len;
	TNimNode** sons;
};
typedef NU8 tyEnum_TNimKind__gvi1epwSO1OTm5TYYpvciQ;
typedef NU8 tySet_tyEnum_TNimTypeFlag__kg8CbOmSm78f9cYZNYwXtRw;
typedef N_NIMCALL_PTR(void, tyProc__ojoeKfW4VYIm36I9cpDTQIg) (void* p_p0, NI op_p1);
typedef N_NIMCALL_PTR(void*, tyProc__WSm2xU5ARYv9aAR4l0z9c9auQ) (void* p_p0);
struct TNimType {
	NI size;
	NI align;
	tyEnum_TNimKind__gvi1epwSO1OTm5TYYpvciQ kind;
	tySet_tyEnum_TNimTypeFlag__kg8CbOmSm78f9cYZNYwXtRw flags;
	TNimType* base;
	TNimNode* node;
	void* finalizer;
	tyProc__ojoeKfW4VYIm36I9cpDTQIg marker;
	tyProc__WSm2xU5ARYv9aAR4l0z9c9auQ deepcopy;
};
struct RootObj {
TNimType* m_type;
};
struct RootEffect {
  RootObj Sup;
};
struct Exception {
  RootObj Sup;
	Exception* parent;
	NCSTRING name;
	NimStringDesc* message;
	tySequence__2ALwPJKv8Nz8mMm4Hy9crdw* trace;
	Exception* up;
};
typedef long tyArray__YIYg2AHg0wu0su59avGYMLQ[25];
struct TSafePoint {
	TSafePoint* prev;
	NI status;
	jmp_buf context;
};
struct GcFrameHeader {
	NI len;
	GcFrameHeader* prev;
};
typedef N_NIMCALL_PTR(void, Finalizer) (void* self_p0);
struct ForLoopStmt {
	char dummy;
};
N_LIB_PRIVATE N_NOCONV(void, signalHandler)(int sign_p0);
N_LIB_PRIVATE N_NIMCALL(NI, getRefcount)(void* p_p0);
N_LIB_IMPORT N_CDECL(NI, add)(NI a_p0, NI b_p1);
N_LIB_IMPORT N_CDECL(int, bind_add)(lua_State* L_p0);
N_LIB_IMPORT N_CDECL(void, LuaInit)(lua_State* L_p0);
N_LIB_IMPORT N_CDECL(void, NimMain)(void);
#endif /* __nim__ */
